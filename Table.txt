-- Create database (optional)
CREATE DATABASE railway_reservation;
USE railway_reservation;

-- Create PASSENGER table
CREATE TABLE PASSENGER (
    passenger_id INT PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    email VARCHAR(100),
    phone VARCHAR(15) NOT NULL,
    address VARCHAR(200),
    date_of_birth DATE,
    gender VARCHAR(10),
    id_proof_type VARCHAR(20),
    id_proof_number VARCHAR(30),
    is_registered BOOLEAN DEFAULT FALSE
);

-- Create TRAIN table
CREATE TABLE TRAIN (
    train_number VARCHAR(10) PRIMARY KEY,
    train_name VARCHAR(100) NOT NULL,
    train_type VARCHAR(30),
    total_coaches INT,
    runs_on_sunday BOOLEAN DEFAULT TRUE,
    runs_on_monday BOOLEAN DEFAULT TRUE,
    runs_on_tuesday BOOLEAN DEFAULT TRUE,
    runs_on_wednesday BOOLEAN DEFAULT TRUE,
    runs_on_thursday BOOLEAN DEFAULT TRUE,
    runs_on_friday BOOLEAN DEFAULT TRUE,
    runs_on_saturday BOOLEAN DEFAULT TRUE
);

-- Create STATION table
CREATE TABLE STATION (
    station_code VARCHAR(10) PRIMARY KEY,
    station_name VARCHAR(100) NOT NULL,
    city VARCHAR(50) NOT NULL,
    state VARCHAR(50) NOT NULL,
    number_of_platforms INT,
    zone VARCHAR(20),
    latitude FLOAT,
    longitude FLOAT
);

-- Create CLASS table
CREATE TABLE CLASS (
    class_type VARCHAR(20) PRIMARY KEY,
    description VARCHAR(100),
    is_ac BOOLEAN,
    berth_layout VARCHAR(50)
);

-- Create TICKET table
CREATE TABLE TICKET (
    pnr_number VARCHAR(15) PRIMARY KEY,
    booking_date DATE NOT NULL,
    journey_date DATE NOT NULL,
    source_station VARCHAR(10) NOT NULL,
    destination_station VARCHAR(10) NOT NULL,
    train_number VARCHAR(10) NOT NULL,
    class_type VARCHAR(20) NOT NULL,
    total_passengers INT NOT NULL,
    total_fare FLOAT NOT NULL,
    booking_status VARCHAR(20) NOT NULL,
    booking_timestamp TIMESTAMP NOT NULL,
    booking_channel VARCHAR(20) NOT NULL,
    FOREIGN KEY (source_station) REFERENCES STATION(station_code),
    FOREIGN KEY (destination_station) REFERENCES STATION(station_code),
    FOREIGN KEY (train_number) REFERENCES TRAIN(train_number),
    FOREIGN KEY (class_type) REFERENCES CLASS(class_type)
);

-- Create PAYMENT table
CREATE TABLE PAYMENT (
    payment_id INT PRIMARY KEY,
    pnr_number VARCHAR(15) NOT NULL,
    amount FLOAT NOT NULL,
    payment_mode VARCHAR(30) NOT NULL,
    payment_timestamp TIMESTAMP NOT NULL,
    transaction_id VARCHAR(50),
    payment_status VARCHAR(20) NOT NULL,
    gst_amount FLOAT,
    service_charge FLOAT,
    FOREIGN KEY (pnr_number) REFERENCES TICKET(pnr_number)
);

-- Create CONCESSION table
CREATE TABLE CONCESSION (
    concession_type VARCHAR(30) PRIMARY KEY,
    concession_percentage FLOAT NOT NULL,
    description VARCHAR(200),
    eligibility_criteria VARCHAR(200),
    requires_proof BOOLEAN DEFAULT TRUE
);

-- Create PASSENGER_TICKET table
CREATE TABLE PASSENGER_TICKET (
    passenger_ticket_id INT PRIMARY KEY,
    pnr_number VARCHAR(15) NOT NULL,
    passenger_id INT NOT NULL,
    seat_number VARCHAR(10),
    coach_number VARCHAR(10),
    reservation_status VARCHAR(20) NOT NULL,
    is_primary_passenger BOOLEAN DEFAULT FALSE,
    concession_amount FLOAT DEFAULT 0,
    concession_type VARCHAR(30),
    FOREIGN KEY (pnr_number) REFERENCES TICKET(pnr_number),
    FOREIGN KEY (passenger_id) REFERENCES PASSENGER(passenger_id),
    FOREIGN KEY (concession_type) REFERENCES CONCESSION(concession_type)
);

-- Create TRAIN_CLASS table
CREATE TABLE TRAIN_CLASS (
    train_class_id INT PRIMARY KEY,
    train_number VARCHAR(10) NOT NULL,
    class_type VARCHAR(20) NOT NULL,
    total_seats INT NOT NULL,
    basic_fare FLOAT NOT NULL,
    FOREIGN KEY (train_number) REFERENCES TRAIN(train_number),
    FOREIGN KEY (class_type) REFERENCES CLASS(class_type),
    UNIQUE (train_number, class_type)
);

-- Create ROUTE table
CREATE TABLE ROUTE (
    route_id INT PRIMARY KEY,
    train_number VARCHAR(10) NOT NULL,
    source_station VARCHAR(10) NOT NULL,
    destination_station VARCHAR(10) NOT NULL,
    total_distance INT NOT NULL,
    total_stops INT,
    FOREIGN KEY (train_number) REFERENCES TRAIN(train_number),
    FOREIGN KEY (source_station) REFERENCES STATION(station_code),
    FOREIGN KEY (destination_station) REFERENCES STATION(station_code)
);

-- Create ROUTE_STATION table
CREATE TABLE ROUTE_STATION (
    route_station_id INT PRIMARY KEY,
    route_id INT NOT NULL,
    station_code VARCHAR(10) NOT NULL,
    stop_number INT NOT NULL,
    arrival_time TIME,
    departure_time TIME,
    distance_from_source INT NOT NULL,
    platform_number INT,
    halt_time INT,
    FOREIGN KEY (route_id) REFERENCES ROUTE(route_id),
    FOREIGN KEY (station_code) REFERENCES STATION(station_code),
    UNIQUE (route_id, stop_number),
    UNIQUE (route_id, station_code)
);

-- Create TRAIN_STATUS table
CREATE TABLE TRAIN_STATUS (
    status_id INT PRIMARY KEY,
    train_number VARCHAR(10) NOT NULL,
    journey_date DATE NOT NULL,
    class_type VARCHAR(20) NOT NULL,
    available_seats INT NOT NULL,
    rac_seats INT DEFAULT 0,
    waitlist_count INT DEFAULT 0,
    last_updated TIMESTAMP NOT NULL,
    remarks VARCHAR(200),
    FOREIGN KEY (train_number) REFERENCES TRAIN(train_number),
    FOREIGN KEY (class_type) REFERENCES CLASS(class_type),
    UNIQUE (train_number, journey_date, class_type)
);

-- Create CANCELLATION table
-- Note: The CANCELLATION table was duplicated in your schema, I've included it just once
CREATE TABLE CANCELLATION (
    cancellation_id INT PRIMARY KEY,
    pnr_number VARCHAR(15) NOT NULL,
    cancellation_timestamp TIMESTAMP NOT NULL,
    cancellation_reason VARCHAR(200),
    refund_amount FLOAT NOT NULL,
    refund_status VARCHAR(20) NOT NULL,
    refund_timestamp TIMESTAMP,
    cancelled_by VARCHAR(30),
    FOREIGN KEY (pnr_number) REFERENCES TICKET(pnr_number)
);


-- For Booking details



DROP FUNCTION IF EXISTS get_booking_details;

DELIMITER //

CREATE FUNCTION get_booking_details(p_pnr VARCHAR(15)) 
RETURNS JSON
DETERMINISTIC
BEGIN
    DECLARE result JSON;
    
    -- Get ticket and passenger details
    SELECT JSON_OBJECT(
        'pnr', t.pnr_number,
        'trainName', tr.train_name,
        'trainNumber', t.train_number,
        'classType', t.class_type,
        'journeyDate', t.journey_date,
        'sourceStation', t.source_station,
        'destinationStation', t.destination_station,
        'departureTime', rs1.departure_time,
        'arrivalTime', rs2.arrival_time,
        'totalFare', t.total_fare,
        'passengers', (
            SELECT JSON_ARRAYAGG(
                JSON_OBJECT(
                    'name', p.name,
                    'age', TIMESTAMPDIFF(YEAR, p.date_of_birth, CURDATE()),
                    'gender', p.gender,
                    'seatNumber', pt.seat_number,
                    'coachNumber', pt.coach_number,
                    'status', pt.reservation_status
                )
            )
            FROM PASSENGER p
            JOIN PASSENGER_TICKET pt ON p.passenger_id = pt.passenger_id
            WHERE pt.pnr_number = t.pnr_number
        ),
        'payment', (
            SELECT JSON_OBJECT(
                'paymentMode', payment_mode,
                'transactionId', transaction_id,
                'paymentStatus', payment_status
            )
            FROM PAYMENT
            WHERE pnr_number = t.pnr_number
            LIMIT 1
        )
    ) INTO result
    FROM TICKET t
    JOIN TRAIN tr ON t.train_number = tr.train_number
    JOIN ROUTE r ON t.train_number = r.train_number
    JOIN ROUTE_STATION rs1 ON r.route_id = rs1.route_id AND t.source_station = rs1.station_code
    JOIN ROUTE_STATION rs2 ON r.route_id = rs2.route_id AND t.destination_station = rs2.station_code
    WHERE t.pnr_number = p_pnr;
    
    RETURN result;
END //

DELIMITER ;



-- Sql FUNCTION for tkt booking 

DROP PROCEDURE IF EXISTS book_ticket;

DELIMITER //

CREATE PROCEDURE book_ticket(
    IN p_name VARCHAR(100),
    IN p_email VARCHAR(100),
    IN p_phone VARCHAR(15),
    IN p_address VARCHAR(200),
    IN p_date_of_birth DATE,
    IN p_gender VARCHAR(10),
    IN p_id_proof_type VARCHAR(20),
    IN p_id_proof_number VARCHAR(30),
    IN p_is_registered BOOLEAN,
    IN p_train_number VARCHAR(10),
    IN p_journey_date DATE,
    IN p_class_type VARCHAR(20),
    IN p_payment_mode VARCHAR(30),
    OUT p_result JSON
)
BEGIN
    DECLARE v_passenger_id INT;
    DECLARE v_pnr VARCHAR(15);
    DECLARE v_basic_fare FLOAT;
    DECLARE v_total_fare FLOAT;
    DECLARE v_booking_channel VARCHAR(20);
    DECLARE v_source_station VARCHAR(10);
    DECLARE v_dest_station VARCHAR(10);
    
    -- Set booking channel based on payment mode
    SET v_booking_channel = IF(p_payment_mode = 'Online', 'Online', 'Counter');
    
    -- Generate PNR
    SET v_pnr = CONCAT(
        DATE_FORMAT(NOW(), '%y%m%d'),
        LPAD(FLOOR(RAND() * 10000), 4, '0')
    );
    
    -- Get basic fare
    SELECT basic_fare INTO v_basic_fare
    FROM TRAIN_CLASS
    WHERE train_number = p_train_number AND class_type = p_class_type;
    
    -- Calculate total fare (basic fare + 5% GST + 2% service charge)
    SET v_total_fare = v_basic_fare * 1.07;
    
    -- Get source and destination stations
    SELECT source_station, destination_station 
    INTO v_source_station, v_dest_station
    FROM ROUTE 
    WHERE train_number = p_train_number 
    LIMIT 1;
    
    -- Start transaction
    START TRANSACTION;
    
    -- Insert passenger
    INSERT INTO PASSENGER (
        name, email, phone, address, date_of_birth, gender,
        id_proof_type, id_proof_number, is_registered
    ) VALUES (
        p_name, p_email, p_phone, p_address, p_date_of_birth, p_gender,
        p_id_proof_type, p_id_proof_number, p_is_registered
    );
    
    SET v_passenger_id = LAST_INSERT_ID();
    
    -- Insert ticket
    INSERT INTO TICKET (
        pnr_number, booking_date, journey_date, source_station,
        destination_station, train_number, class_type, total_passengers,
        total_fare, booking_status, booking_timestamp, booking_channel
    ) VALUES (
        v_pnr, CURDATE(), p_journey_date, v_source_station,
        v_dest_station, p_train_number, p_class_type, 1, v_total_fare,
        'CONFIRMED', NOW(), v_booking_channel
    );
    
    -- Insert passenger ticket
    INSERT INTO PASSENGER_TICKET (
        pnr_number, passenger_id, seat_number, coach_number,
        reservation_status, is_primary_passenger
    ) VALUES (
        v_pnr, v_passenger_id, NULL, NULL, 'CONFIRMED', TRUE
    );
    
    -- Insert payment
    INSERT INTO PAYMENT (
        pnr_number, amount, payment_mode, payment_timestamp,
        transaction_id, payment_status, gst_amount, service_charge
    ) VALUES (
        v_pnr, v_total_fare, p_payment_mode, NOW(),
        CONCAT('TXN', DATE_FORMAT(NOW(), '%Y%m%d%H%i%s')),
        'Success', v_basic_fare * 0.05, v_basic_fare * 0.02
    );
    
    -- Update train status
    UPDATE TRAIN_STATUS 
    SET available_seats = available_seats - 1
    WHERE train_number = p_train_number 
    AND journey_date = p_journey_date 
    AND class_type = p_class_type;
    
    -- Commit transaction
    COMMIT;
    
    -- Set the result
    SET p_result = JSON_OBJECT(
        'success', TRUE,
        'pnr', v_pnr,
        'message', 'Ticket booked successfully',
        'bookingDetails', (
            SELECT get_booking_details(v_pnr)
        )
    );
END //

DELIMITER ;



-- FUNCTION to get train-details

DROP FUNCTION IF EXISTS get_train_details;

DELIMITER //

CREATE FUNCTION get_train_details(p_train_number VARCHAR(10)) 
RETURNS JSON
DETERMINISTIC
BEGIN
    DECLARE result JSON;
    
    -- Get train details and schedule
    SELECT JSON_OBJECT(
        'trainNumber', t.train_number,
        'trainName', t.train_name,
        'trainType', t.train_type,
        'totalCoaches', t.total_coaches,
        'runningDays', JSON_OBJECT(
            'sunday', t.runs_on_sunday,
            'monday', t.runs_on_monday,
            'tuesday', t.runs_on_tuesday,
            'wednesday', t.runs_on_wednesday,
            'thursday', t.runs_on_thursday,
            'friday', t.runs_on_friday,
            'saturday', t.runs_on_saturday
        ),
        'route', (
            SELECT JSON_OBJECT(
                'source', r.source_station,
                'destination', r.destination_station,
                'totalDistance', r.total_distance,
                'totalStops', r.total_stops
            )
            FROM ROUTE r
            WHERE r.train_number = t.train_number
        ),
        'schedule', (
            SELECT JSON_ARRAYAGG(
                JSON_OBJECT(
                    'stationCode', rs.station_code,
                    'stationName', s.station_name,
                    'city', s.city,
                    'state', s.state,
                    'arrivalTime', rs.arrival_time,
                    'departureTime', rs.departure_time,
                    'distanceFromSource', rs.distance_from_source,
                    'platformNumber', rs.platform_number,
                    'haltTime', rs.halt_time
                )
            )
            FROM ROUTE_STATION rs
            JOIN STATION s ON rs.station_code = s.station_code
            WHERE rs.route_id = (
                SELECT route_id FROM ROUTE WHERE train_number = t.train_number
            )
            ORDER BY rs.stop_number
        ),
        'classes', (
            SELECT JSON_ARRAYAGG(
                JSON_OBJECT(
                    'classType', tc.class_type,
                    'totalSeats', tc.total_seats,
                    'basicFare', tc.basic_fare
                )
            )
            FROM TRAIN_CLASS tc
            WHERE tc.train_number = t.train_number
        )
    ) INTO result
    FROM TRAIN t
    WHERE t.train_number = p_train_number;
    
    RETURN result;
END //

DELIMITER ;