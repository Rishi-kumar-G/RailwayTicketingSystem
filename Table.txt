-- Create database (optional)
CREATE DATABASE railway_reservation;
USE railway_reservation;

-- Create PASSENGER table
CREATE TABLE PASSENGER (
    passenger_id INT PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    email VARCHAR(100),
    phone VARCHAR(15) NOT NULL,
    address VARCHAR(200),
    date_of_birth DATE,
    gender VARCHAR(10),
    id_proof_type VARCHAR(20),
    id_proof_number VARCHAR(30),
    is_registered BOOLEAN DEFAULT FALSE
);

-- Create TRAIN table
CREATE TABLE TRAIN (
    train_number VARCHAR(10) PRIMARY KEY,
    train_name VARCHAR(100) NOT NULL,
    train_type VARCHAR(30),
    total_coaches INT,
    runs_on_sunday BOOLEAN DEFAULT TRUE,
    runs_on_monday BOOLEAN DEFAULT TRUE,
    runs_on_tuesday BOOLEAN DEFAULT TRUE,
    runs_on_wednesday BOOLEAN DEFAULT TRUE,
    runs_on_thursday BOOLEAN DEFAULT TRUE,
    runs_on_friday BOOLEAN DEFAULT TRUE,
    runs_on_saturday BOOLEAN DEFAULT TRUE
);

-- Create STATION table
CREATE TABLE STATION (
    station_code VARCHAR(10) PRIMARY KEY,
    station_name VARCHAR(100) NOT NULL,
    city VARCHAR(50) NOT NULL,
    state VARCHAR(50) NOT NULL,
    number_of_platforms INT,
    zone VARCHAR(20),
    latitude FLOAT,
    longitude FLOAT
);

-- Create CLASS table
CREATE TABLE CLASS (
    class_type VARCHAR(20) PRIMARY KEY,
    description VARCHAR(100),
    is_ac BOOLEAN,
    berth_layout VARCHAR(50)
);

-- Create TICKET table
CREATE TABLE TICKET (
    pnr_number VARCHAR(15) PRIMARY KEY,
    booking_date DATE NOT NULL,
    journey_date DATE NOT NULL,
    source_station VARCHAR(10) NOT NULL,
    destination_station VARCHAR(10) NOT NULL,
    train_number VARCHAR(10) NOT NULL,
    class_type VARCHAR(20) NOT NULL,
    total_passengers INT NOT NULL,
    total_fare FLOAT NOT NULL,
    booking_status VARCHAR(20) NOT NULL,
    booking_timestamp TIMESTAMP NOT NULL,
    booking_channel VARCHAR(20) NOT NULL,
    FOREIGN KEY (source_station) REFERENCES STATION(station_code),
    FOREIGN KEY (destination_station) REFERENCES STATION(station_code),
    FOREIGN KEY (train_number) REFERENCES TRAIN(train_number),
    FOREIGN KEY (class_type) REFERENCES CLASS(class_type)
);

-- Create PAYMENT table
CREATE TABLE PAYMENT (
    payment_id INT PRIMARY KEY,
    pnr_number VARCHAR(15) NOT NULL,
    amount FLOAT NOT NULL,
    payment_mode VARCHAR(30) NOT NULL,
    payment_timestamp TIMESTAMP NOT NULL,
    transaction_id VARCHAR(50),
    payment_status VARCHAR(20) NOT NULL,
    gst_amount FLOAT,
    service_charge FLOAT,
    FOREIGN KEY (pnr_number) REFERENCES TICKET(pnr_number)
);

-- Create CONCESSION table
CREATE TABLE CONCESSION (
    concession_type VARCHAR(30) PRIMARY KEY,
    concession_percentage FLOAT NOT NULL,
    description VARCHAR(200),
    eligibility_criteria VARCHAR(200),
    requires_proof BOOLEAN DEFAULT TRUE
);

-- Create PASSENGER_TICKET table
CREATE TABLE PASSENGER_TICKET (
    passenger_ticket_id INT PRIMARY KEY,
    pnr_number VARCHAR(15) NOT NULL,
    passenger_id INT NOT NULL,
    seat_number VARCHAR(10),
    coach_number VARCHAR(10),
    reservation_status VARCHAR(20) NOT NULL,
    is_primary_passenger BOOLEAN DEFAULT FALSE,
    concession_amount FLOAT DEFAULT 0,
    concession_type VARCHAR(30),
    FOREIGN KEY (pnr_number) REFERENCES TICKET(pnr_number),
    FOREIGN KEY (passenger_id) REFERENCES PASSENGER(passenger_id),
    FOREIGN KEY (concession_type) REFERENCES CONCESSION(concession_type)
);

-- Create TRAIN_CLASS table
CREATE TABLE TRAIN_CLASS (
    train_class_id INT PRIMARY KEY,
    train_number VARCHAR(10) NOT NULL,
    class_type VARCHAR(20) NOT NULL,
    total_seats INT NOT NULL,
    basic_fare FLOAT NOT NULL,
    FOREIGN KEY (train_number) REFERENCES TRAIN(train_number),
    FOREIGN KEY (class_type) REFERENCES CLASS(class_type),
    UNIQUE (train_number, class_type)
);

-- Create ROUTE table
CREATE TABLE ROUTE (
    route_id INT PRIMARY KEY,
    train_number VARCHAR(10) NOT NULL,
    source_station VARCHAR(10) NOT NULL,
    destination_station VARCHAR(10) NOT NULL,
    total_distance INT NOT NULL,
    total_stops INT,
    FOREIGN KEY (train_number) REFERENCES TRAIN(train_number),
    FOREIGN KEY (source_station) REFERENCES STATION(station_code),
    FOREIGN KEY (destination_station) REFERENCES STATION(station_code)
);

-- Create ROUTE_STATION table
CREATE TABLE ROUTE_STATION (
    route_station_id INT PRIMARY KEY,
    route_id INT NOT NULL,
    station_code VARCHAR(10) NOT NULL,
    stop_number INT NOT NULL,
    arrival_time TIME,
    departure_time TIME,
    distance_from_source INT NOT NULL,
    platform_number INT,
    halt_time INT,
    FOREIGN KEY (route_id) REFERENCES ROUTE(route_id),
    FOREIGN KEY (station_code) REFERENCES STATION(station_code),
    UNIQUE (route_id, stop_number),
    UNIQUE (route_id, station_code)
);

-- Create TRAIN_STATUS table
CREATE TABLE TRAIN_STATUS (
    status_id INT PRIMARY KEY,
    train_number VARCHAR(10) NOT NULL,
    journey_date DATE NOT NULL,
    class_type VARCHAR(20) NOT NULL,
    available_seats INT NOT NULL,
    rac_seats INT DEFAULT 0,
    waitlist_count INT DEFAULT 0,
    last_updated TIMESTAMP NOT NULL,
    remarks VARCHAR(200),
    FOREIGN KEY (train_number) REFERENCES TRAIN(train_number),
    FOREIGN KEY (class_type) REFERENCES CLASS(class_type),
    UNIQUE (train_number, journey_date, class_type)
);

-- Create CANCELLATION table
-- Note: The CANCELLATION table was duplicated in your schema, I've included it just once
CREATE TABLE CANCELLATION (
    cancellation_id INT PRIMARY KEY,
    pnr_number VARCHAR(15) NOT NULL,
    cancellation_timestamp TIMESTAMP NOT NULL,
    cancellation_reason VARCHAR(200),
    refund_amount FLOAT NOT NULL,
    refund_status VARCHAR(20) NOT NULL,
    refund_timestamp TIMESTAMP,
    cancelled_by VARCHAR(30),
    FOREIGN KEY (pnr_number) REFERENCES TICKET(pnr_number)
);


-- For Booking details



DROP FUNCTION IF EXISTS get_booking_details;

DELIMITER //

CREATE FUNCTION get_booking_details(p_pnr VARCHAR(15)) 
RETURNS JSON
DETERMINISTIC
BEGIN
    DECLARE result JSON;
    
    -- Get ticket and passenger details
    SELECT JSON_OBJECT(
        'pnr', t.pnr_number,
        'trainName', tr.train_name,
        'trainNumber', t.train_number,
        'classType', t.class_type,
        'journeyDate', t.journey_date,
        'sourceStation', t.source_station,
        'destinationStation', t.destination_station,
        'departureTime', rs1.departure_time,
        'arrivalTime', rs2.arrival_time,
        'totalFare', t.total_fare,
        'passengers', (
            SELECT JSON_ARRAYAGG(
                JSON_OBJECT(
                    'name', p.name,
                    'age', TIMESTAMPDIFF(YEAR, p.date_of_birth, CURDATE()),
                    'gender', p.gender,
                    'seatNumber', pt.seat_number,
                    'coachNumber', pt.coach_number,
                    'status', pt.reservation_status
                )
            )
            FROM PASSENGER p
            JOIN PASSENGER_TICKET pt ON p.passenger_id = pt.passenger_id
            WHERE pt.pnr_number = t.pnr_number
        ),
        'payment', (
            SELECT JSON_OBJECT(
                'paymentMode', payment_mode,
                'transactionId', transaction_id,
                'paymentStatus', payment_status
            )
            FROM PAYMENT
            WHERE pnr_number = t.pnr_number
            LIMIT 1
        )
    ) INTO result
    FROM TICKET t
    JOIN TRAIN tr ON t.train_number = tr.train_number
    JOIN ROUTE r ON t.train_number = r.train_number
    JOIN ROUTE_STATION rs1 ON r.route_id = rs1.route_id AND t.source_station = rs1.station_code
    JOIN ROUTE_STATION rs2 ON r.route_id = rs2.route_id AND t.destination_station = rs2.station_code
    WHERE t.pnr_number = p_pnr;
    
    RETURN result;
END //

DELIMITER ;